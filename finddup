#!/usr/bin/env python

import argparse
import filecmp
import itertools
import os
import subprocess
import sys

# Simple logging class to support --verbose switch
class Log():
    is_verbose = False
    @classmethod
    def verbose(cls, msg):
        if cls.is_verbose:
            print(msg)

    @classmethod
    def log(cls, msg):
        print(msg)

# Use the shell 'find' command to search the input list of directories
# recusrively, and generate a list of filenames.
def generateFileList(directories):
    rv = []
    for directory in directories:
        find_out = subprocess.check_output("find \"" + directory + "\" -type f -print0", shell=True)
        rv += [i for i in find_out.strip().split("\0") if len(i) > 0]  # clean up, strip
    return rv

# Create a dict, where file size is the key, and a list of files of that size
# are the values, for all files provided in filelist.
def groupBySize(filelist):
    size_hash = {}
    for filename in filelist:
        size = os.stat(filename).st_size
        if(size in size_hash):
            size_hash[size].append(filename)
        else:
            size_hash[size] = [filename]
    return size_hash


def outputDuplicateFile(duplicates):
    msg = duplicates[1]
    if Log.is_verbose:
        Log.verbose(duplicates[1] + " (dupe of " + duplicates[0] + ")")
    else:
        Log.log(duplicates[1])


# Return a list of files from filelist that are duplicates. For any group of
# duplicate files, all but one will be included in the list
def compareFiles(filelist):
    sizegroup = groupBySize(filelist)
    files_to_compare = []
    for i in [i for i in sizegroup.iteritems() if len(i[1]) > 1]:
        files_to_compare.append(i[1])

    duplicate_files = []
    for i in files_to_compare:
        pairs = itertools.combinations(i,2)
        for pair in pairs:
            Log.verbose("Comparing " + str(pair))
            if filecmp.cmp(pair[0], pair[1], shallow=False):
                duplicate_files.append(pair)
                outputDuplicateFile(pair)
    return duplicate_files

#### main

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('dirs', nargs='*', default=["."],
                    help='Directories to recursively search for duplicate files.')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='Verbose output')
args = parser.parse_args()


Log.is_verbose = args.verbose

# Generate filelist and run duplicate detector
filelist = generateFileList(args.dirs)
duplicate_pairs = compareFiles(filelist)

Log.verbose(str(len(filelist)) + " files examined")
Log.verbose(str(len(duplicate_pairs)) + " duplicates found")
